ID,project,class,method,merge commit,Confluence Inter,OA Inter,left right DFP-Inter,right left DFP-Inter,left right PDG,right left PDG,Original Sample,LÃ©uson,Roberto,DeSouza,LOI,Locally Observable Interference Description,Lines in the merge commit with changes made by left,Lines in the merge commit with changes made by right,Summary of changes made by left,Summary of changes made by right,Result Analyses,OR Result,Confluence Inter Result,OA Inter Result,DF Inter Result,PDG Result
2,antlr4,org.antlr.v4.codegen.target.Python2Target,python2Keywords,69ff2669eec265e25721dbc27cb00f6c381d0b41,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Leuson,x,,,-,Left and Right change the same array; which means they change the leght of the object. A test case should explore the array lenght in each merge scenario commit. A test case to detect this conflict can be found here.,[64],[53],Left changes the list of values of an array of Strings during its initialization (adition of a new value),Right changes the list of values of an array of Strings during its initialization (adition of a new value),FALSE,TRUE NEGATIVE,,,,
3,antlr4,org.antlr.v4.codegen.target.Python3Target,python3Keywords,69ff2669eec265e25721dbc27cb00f6c381d0b41,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Leuson,x,,,-,Left and Right change the same array; which means they change the leght of the object. A test case should explore the array lenght in each merge scenario commit. A test case to detect this conflict can be found here.,[64],[53],Left changes the list of values of an array of Strings during its initialization (adition of a new value),Right changes the list of values of an array of Strings during its initialization (adition of a new value),FALSE,TRUE NEGATIVE,,,,
4,druid,com.metamx.druid.loading.S3SegmentPusher,push(File; DataSegment),05168808c278c080c59c19e858d9471b316cd1f5,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,Roberto,x,x,,No,There is no locally observable interference as the contributions change different objects; and these changes are not accessed by each other.,[66; 118; 139; 110],[105; 125],Left changes the object that will be returned by setting the object field binaryVersion.,Right set the field acl on object toPush; which is used by the returned object.,TRUE,FALSE POSITIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,FALSE POSITIVE
5,netty,org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder,decode(ChannelHandlerContext; Channel; ChannelBuffer),193acdb36cd3da9bfc62dd69c4208dff3f0a2b1b,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,Roberto,x,x,,Yes,The changes performed by right will only be executed in some cases because of the change performed by Left. So the method return can be different for each version of the merge scenario. In the base commit; the local variable frameLength will be updated; and consequently the buffer will be updated (buffer.skipBytes(buffer.readableBytes())); that is used to create the method return. In the Left commit; as the !lengthFieldIncludedInFrameLength == TRUE; the local variable frameLength will not be updated; and consequently the buffer will not be updated (buffer.skipBytes(buffer.readableBytes())). In the Merge commit; as the !lengthFieldIncludedInFrameLength == TRUE; the local variable frameLength will not be updated; and consequently the buffer will not be updated (buffer.skipBytes(buffer.readableBytes())); but the call for failIfNecessary will update the parameter ctx. A test case to detect the conflict can be found here.,[358; 360],[322; 374],Left updates how variable frameLength is incremented; which is done only if the new conditional in the if statement is true.,Right updates method call failIfNecessary adding a new parameter (boolean value). [But these changes were also done by Left.],TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE
6,OpenTripPlanner,org.opentripplanner.routing.spt.MultiShortestPathTree,dominates(State; State),4c506dce43775704919d084f0acfba86d251bf4a,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE,Roberto,x,x,,Yes,The new if statement added by right checks an action; which if true returns false. As these modifications are placed before the changes introduced by Left; these last contributions could not be executed under the new circumstances. So the method result may present different return values. The assertion would use the method return (boolean). In the Base commit; all the initial if statements are FALSE; so the method return would be return walkDistanceBetter && weightBetter && timeBetter (it should return FALSE). In the Left commit; all the initial if statements are FALSE; so the method return will be walkDistanceIsHopeful && weightIsHopeful && timeIsHopeful (it should return TRUE). In the Merge commit; all the initial if statements are FALSE; but the new if thisState.isBikeParked() != other.isBikeParked() is TRUE; and the method return FALSE. A test case to detect this conflict can be found here.,[144; 146; 147; 148; 149; 152; 141],[123],Left renames some local variables and updates three boolean local variables used to define the method return.,Right adds a new if statement; which may return false.,TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE
7,webbit,org.webbitserver.netty.WebSocketClient,adjustPipelineToWebSocket(ChannelHandlerContext; MessageEvent; ChannelHandler; ChannelHandler),74d2d2b87704d003acacb34e4ca8fb5f897b938f,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,x,x,,No,There is no locally observable interference as one of the contributions is a refactoring.,[260],[262],Left sets the version of webSockectConnection object calling the method setHybiWebSocketVersion.,Right changes the order of parameters used to create the local variable webSocketChannelHandler; so it's a refactoring.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
8,resty-gwt,org.fusesource.restygwt.rebind.DirectRestServiceInterfaceClassCreator,getMethodCallback(JMethod),867b917c43c32acbdcac55767e7f04334006c866,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,Guilherme,x,,,Yes,"The changes are individually supposed to satisfy are not satisfied: left changes method's expected result by right. Suppose a test that receives an ""Overlay"" method returning a primitive type (int; for instance). The test then checks if result type's is ""OverlayCallback"". The test fails on base; passes on right; and fails on the merged version. A test case can be found here.",[83; 84; 85],[86; 87; 88; 89; 90; 91],changed if statement (condition; and block) on method getMethodCallback(JMethod),extracted variable refactoring and added if statement on method getMethodCallback(JMethod),TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE
9,storm,org.apache.storm.kafka.spout.KafkaSpout,open(Map; TopologyContext; SpoutOutputCollector),ad2be678831b3b060229fd936e3908110162b7ac,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,,,,No,There is no locally observable interference as the contributions change different and not related fields.,[],[118; 102],Left removes the assignment value to field maxRetries; which was also removed by Left.,Right assigns a value for field refreshSubscriptionTimer; which was also added by Right.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
10,storm,org.apache.storm.kafka.spout.KafkaSpoutConfig,KafkaSpoutConfig(Builder<K;V>),ad2be678831b3b060229fd936e3908110162b7ac,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,,,,No,There is no locally observable interference as the contributions change different and not related fields.,[],[435; 436; 437; 438; 439; 440; 441; 430; 431],Left removes the assignment for field maxRetries; and also its declaration.,Right removes four fields and adds seven fields with their assignment.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
11,storm,org.apache.storm.kafka.spout.KafkaSpoutConfig,toString(),ad2be678831b3b060229fd936e3908110162b7ac,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Leuson,x,,,Yes,Left and Right change the same string that will be returned. This is equivalent to both developers assigning different values to the same variable. A test case should explore the string returned from merge scenario commit. A test case to detect this conflict can be found here.,[],[515; 516; 521; 522],Left removes the field and reference for maxRetries of the returning string from the method toString();,Right performs a refactoring involving the references for key and value variables. It updates how the variable values are accessed (now using get methods instead of directly accessing the values). Right also removes references to the field: kafkaSpoutStreams; tuplesBuilder; topics; and topicWildcardPattern. Finally; it adds reference for subscription and translator.,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
12,storm,org.apache.storm.kafka.spout.KafkaSpout,emitTupleIfNotEmitted(ConsumerRecord<K;V>),bd1f5c54752f67b484a83c26667331234234d3a3,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,Leuson,x,,,Yes,"report = with isScheduled and isReady =  false;
msgId = new KafkaSpoutMessageId(record);
retryService.isScheduled(msgId) = false
retryService.isReady(msgId) = true
AssertTrue(emiteTupleIfNotEmited(record); true)
when retryService.remove(msg) //launch exception
",[305; 306; 307; 312],[316; 319],Left performs a refactoring extracting a variable of an IF statement; it also changes another IF condition.,Right updates the method signature changing its return type for boolean and adds return statements.,TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE
13,swagger-maven-plugin,com.github.kongchen.swagger.docgen.reader.AbstractReader,hasValidAnnotations(List<Annotation>),e825a7fdc6ef688f1253b93d2cb236e710acfc56,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Guilherme,x,,,-,Left and Right change the same array (right adds the same elements that left does; and also a new entry). A test case will reveal the interference by calling the method hasValidations twice. Each call with a parameter with only the contributions of one parent. One assertion should expect true based on the entry did by Left; and another expecting False based on the addition by Right. A test case to detect this conflict can be found here.,[342; 343],[342],Left adds items to the returned list used to define the return of method  hasValidAnnotations,Right also adds items to the returned list used to define the return of method  hasValidAnnotations,FALSE,TRUE NEGATIVE,,,,
14,jsoup,org.jsoup.helper.HttpConnection,execute(Connection.Request; Response),a8b6982de98ff76ef254031d7152fff57f6bf941,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,x,x,,Yes,"The parent changes are related; while Right changes a parameter; Left changes a local variable. In the Base commit; the parameter req is changed (req.method(Method.GET); req.data().clear()); the method execute will be called again; but with parameters that makes the first if FALSE (res.hasHeader(LOCATION) && req.followRedirects()). In the Right commit; the if statement status != HTTP_TEMP_REDIR will be FALSE; and no change will be done in req; the method execute will be called again; but with parameters that makes the first if FALSE (res.hasHeader(LOCATION) && req.followRedirects()). In the Merge commit; the if statement status != HTTP_TEMP_REDIR will be FALSE; and no change will be done in req; (res.hasHeader(LOCATION) && req.followRedirects()); the method execute will be called again; but with parameters that makes the first if FALSE (res.hasHeader(LOCATION) && req.followRedirects()). The if statement res.hasHeaderWithValue(CONTENT_ENCODING; ""gzip"") would be FALSE; and then the bodyStream used in res will not be GZIPInputStream. Not possible to set specific values for responses; used to generate the headers.
",[584; 585; 586],[544; 547],Left changes the value assigned to the local variable bodyStream; and also removes the local variable dataStream. The object bodyStream uses the object conn; that is created based on req (changed by Right).,Right adds a new verification before calling some methods of the parameter req.,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
15,jsoup,org.jsoup.helper.HttpConnection,createConnection(Connection.Request),fee4762322f85a1109edd75ccb67f38cf5008c80,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Guilherme,x,,,No,There is no locally observable interference as contributions different fields of the same object; with no dependency between the fields in the analyzed method,[609; 610; 611; 612; 613; 614],[617],Left adds a IF statement; allowing extra set fields of the object returned by the method,Rights changes a IF condition; setting more fields of the object returned by the method and accepting more values than before,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
16,jsoup,org.jsoup.helper.HttpConnection,execute(Connection.Request; Response),3f7d2c71dbbbb289c684f339874eed8ac2747fa0,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,Roberto,x,x,,Yes,"The semantic conflict is caused by the control flow; so based on the changes; different excpetions ca be thrown during the execution. A test case to reveal this problem would be motivated by the next example. Assertion () Entry: 1. status == HttpURLConnection.HTTP_SEE_OTHER. 2. !contentType.startsWith(""application/xml"") == FALSE; !xmlContentTypeRxp.matcher(contentType).matches() == FALSE. In this way; in the base commit; the Exception HttpStatusException would be thrown; and the test would fail. In the left commit; the exception UnsupportedMimeTypeException would be thrown; and the test would pass. Finally; in the merge commit; the no exception would be thrown; and the test would fail.",[456],[483; 484; 485],Left adds a new condition (OR) that is reponsible for changing the value of the local variable needsRedirect.,Right updates another if statement conditions; it changes a set of conditions grouped with AND; to the OR operator. This if is responsible for throw a new exception.,TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE
17,jsoup,org.jsoup.nodes.TextNode,outerHtmlHead(StringBuilder; int; Document.OutputSettings),a44e18aa3c1fcd25a68a5965f9490d8f7d026509,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE,Roberto,x,x,,Yes,The changes can be conflicting as the left contributions changes the conditional that updates the value of HTML variable; while right changes the value of accum. In the end; both changes are grouped in the parameter accum. So a test case to detect this conflict should have the following entries and assertions. In the base commit; the first if statement will be FALSE by sending a node that makes the preserveWhiteSpace be FALSE; and no change is performed in the local variable html. The second if will be FALSE as all conditions will be FALSE; so no change is performed in the parameter accum. In the Right commit; the first if statement will be FALSE by sending a node that makes the preserveWhiteSpace be FALSE. So no change is performed in local variable html. In the second if; it will be TRUE as (out.forceAllElementAsBlock() && siblingNodes().size()>0 && !isBlank()) will be TRUE. So the attribute accum will be changed. In the Merge commit; the first if statement will be TRUE by sending a node that makes the preserveWhiteSpace be TRUE. So the changes are performed in the local variable html. In the second if; it will be TRUE as (out.forceAllElementAsBlock() && siblingNodes().size()>0 && !isBlank()) will be TRUE. So the attribute accum will be changed. A test case to detect this conflict can be found here.,[94],[98],Left changes the condition of an if statement; which calls the method preserveWhitespace. Now the method only performs its verifications if the node is not null and is an instance of Element type; otherwise; no action is performed and the value of local variable html is not updated.,Right adds a new condition (OR) in an if statement; which may change the value of the parameter accum.,TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE,TRUE POSITIVE
18,retrofit,retrofit.RestAdapter,logAndReplaceResponse(String; Response; long),2b6c719c6645f8e48dca6d0047c752069d321bc4,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,Although Left has made a significant change; it is still a refactoring; as the same string is passed as a parameter in the log.log() method call.,[438],[415],Deleted a loop with many calls to log and changed to one with arguments different from the previous call; which simply writes to the log output.,Change the log parameter; adding a toString() on header attribute (header.toString()).,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
19,retrofit,retrofit.RestAdapter,logAndReplaceRequest(Request),2b6c719c6645f8e48dca6d0047c752069d321bc4,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,Yes,The changes are in methods that determine the logs; both interfere in the output. A test case can be made by creating an assert to check the output produced by comparing the string produced by the left and right log; will be different.,[398],[369],Deleted a loop with many calls to log and changed to one with arguments different from the previous call; which simply writes to the log output.,Change the log parameter; adding a toString() on header attribute (header.toString()).,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
20,retrofit,retrofit.RequestBuilder,build(),71f622ce51031b152a0be6ad5facfb27a654bf5a,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE,Roberto,x,x,,Yes,The changes are conflicting as they change the same local variable used to create the returned object. A test case to detect this conflict can be found here.,[88],[96; 97; 100; 95],"Left changed the argument of a method call and chained it with another call. Semantically; it inserts ""?"" in the middle of a string stored in the url variable.",Right adds an if statement that surrounds an assignment (which comes from base) to the url variable.,TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE
21,activiti,org.activiti.engine.impl.persistence.entity.DeploymentEntityManager,deleteDeployment(String; boolean),50d8e43eb5917c63abfbcdec1e68e510943f325a,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,Roberto,x,x,,Yes,The new routine will be only executed in case an if condition is satisfied; this condition requires the use of nrOfProcessDefinitionsWithSameKey; that was changed by Left. In the Base commit; the if statement !p.getId().equals(processDefinition) would be FALSE; so the variable nrOfProcessDefinitionsWithSameKey would not be incremented; and the if (nrOfVersions - nrOfProcessDefinitionsWithSameKey <= 1) would be also FALSE. In the Left commit; the if !p.getId().equals(processDefinition.getId()) would be TRUE; and the variable nrOfProcessDefinitionsWithSameKey would be incremented; and the if if (nrOfVersions - nrOfProcessDefinitionsWithSameKey <= 1) would be TRUE. In the Merge commit; the if !p.getId().equals(processDefinition.getId()) would be TRUE; and the variable nrOfProcessDefinitionsWithSameKey would be incremented; and the if if (nrOfVersions - nrOfProcessDefinitionsWithSameKey <= 1) would be TRUE; and the new routine would be executed (lines 114-117). The problem here is to detect this behavior change as the changed variable are local (neither parameters nor class attributes).,[107],[114; 115; 116; 117],Left changes a if condition; that is reponsible for changing the value of the local variable nrOfProcessDefinitionsWithSameKey (incrementation),Right adds a new IF statement; in case the condition is TRUE; it calls new mtethod using the objects of the local list timerStartJobs.,TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE
22,activiti,org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior,execute(ActivityExecution),bf46684ba62f5883673ea8fb0a14aecfe0aedea2,TRUE,TRUE,TRUE,TRUE,FALSE,TRUE,Roberto,x,x,,Yes,By following the changes made by the two developers by getStack > threadLocal.set > this.createMap; we have that the two developers interfere by changing the threadLocals attribute of the Thread class,[112; 113; 114; 115; 116; 117; 110; 111],[118; 125; 126; 127],Left adds a new IF statement; which may set the field formKey of the local variable formKey; or throws an exception.,Right adds a new IF statement; which may call static external methods without using their returns.,TRUE,TRUE POSITIVE,TRUE POSITIVE,TRUE POSITIVE,TRUE POSITIVE,TRUE POSITIVE
23,okhttp,com.squareup.okhttp.internal.bytes.GzipSource,consumeHeader(Deadline),1151c9853ccc3c9c3211c613b9b845b925f8c6a6,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,Roberto,x,x,,No,There is no locally observable interference as both contributions are refactorings.,[112],[138],Left does a refactoring by renaming the method getByte on OkBuffer class.,Right does a refactoring by extracting the local method seek to OkBuffers class.,TRUE,FALSE POSITIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,FALSE POSITIVE
24,okhttp,com.squareup.okhttp.OkHttpClient,copyWithDefaults(),35166168529bd27281685e56a0a122eff44460e9,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,There is no locally observable interference as Left and right change the object that will be returned by the method; but different attributes.,[277; 293],[287],Left changed the object returned by the method using the current object of the class and ass a new value to the field transports.,Right changes the value assigned to result.hostnameverifier adding now an object OkHostnameVerifier.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
25,HikariCP,com.zaxxer.hikari.HikariConfig,validate(),1bca94af9ec625f21d1b58ff10efb5be71ab87a6,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,x,x,,Yes,There is a locally observable interference as both contributions write on local variable logger.,[577; 578; 579; 580; 581; 582],[],Left adds a new IF statement; which may write in logger calling method info,Right removes source code; which would write in logger calling method error or wanr; or even trhows an exception. Changes on formating,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
26,HikariCP,com.zaxxer.hikari.HikariPool,addConnection(),1bca94af9ec625f21d1b58ff10efb5be71ab87a6,FALSE,FALSE,TRUE,FALSE,TRUE,TRUE,Mining,x,,,Yes,There is a locally observable interference as the first IF of the WHILE could break its loop. On Base commit; no break would occur; on Left commit; it could break considering the addition of a new verification on the IF; and on Merge commit; no break considering Right changes the value assigned to retries. The assertion should explore the number of elements added on the field idleConnectionBag.,[356; 372; 374; 365],[339; 340; 341; 342; 343; 344; 345; 362; 346; 348],Left adds a new verification an an IF condition; does a refactoring for an old IF; and also adds a call for a local method.,Rights changes the assigment to local variable retries; adds some new IF statements; and sets the field loginTimeout on datasource.,TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE,TRUE POSITIVE
27,pushy,com.relayrides.pushy.apns.PushManager,handleConnectionFailure(ApnsConnection<T>; Throwable),58901c846e4f0874977c5aabbc34bcb4de3670e0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,x,,,No,There is no locally observable interference because the right developer performed an refactoring. .,[481; 482; 483; 484; 485; 476; 478],[490],Left added a local variable called pushManager and created a for loop to iterate over a list of FailedConnectionListener.,"The right developer performed an ""extract method;"" which is a structural refactoring for the method startNewConnection(). ",FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
28,pushy,com.relayrides.pushy.apns.PushManager,handleConnectionClosure(ApnsConnection<T>),58901c846e4f0874977c5aabbc34bcb4de3670e0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Guilherme,x,,,No,There is no locally observable interference as Right changes are only refactorings; and only Left changes might impact behavior,[520; 510],[515; 500; 502; 503],Left replaces ânew Threadâ with âlistenerExecutorâ,"Right does a refactoring by âextracting"" two local methods.",FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
29,java-faker,com.github.javafaker.Faker,Faker(Locale; Random),ca42fcfaf45cae1754c58e02e1d5d2a58ec03561,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Guilherme,x,,,No,There is no locally observable interference as the contributions change different fields.,[69; 59],[70],Left adds an initialization of two fields on constructor.,Right changes the initialization of a different field.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
30,swagger-core,io.swagger.jaxrs2.OperationParser,getSchemaFromAnnotation(io.swagger.oas.annotations.media.Schema),e7fea7c4889dbdd6a4e0b2d059c8aa0f126ab1c2,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Guilherme,x,,,No,There is no locally observable interference as Right changes are refactorings; and only Left changes modify the program behavior.,[240; 241; 234; 235; 236; 237; 238; 239],[244; 187; 188],Left adds two IF statements; which may set some fields on object schemaObject.,Right renames three methods _enum() to allowableValues(); and _default() to defaultValue,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
31,cucumber-jvm,cuke4duke.internal.java.JavaLanguage,load(String),4505c156b6267c1b760deec570ddbfe047b42aa9,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,Roberto,x,x,,No,There is no locally observable interference as the Right changes do not represent a bahvior change.,[38; 40],[36],Left adds a new IF statement; which may restrict the new addition of the local variable clazz on the field objectFactory.,Right changes generics allowing any type for the local variable clazz.,TRUE,FALSE POSITIVE,TRUE NEGATIVE,TRUE NEGATIVE,FALSE POSITIVE,FALSE POSITIVE
32,dropwizard,io.dropwizard.setup.Bootstrap,Bootstrap(Application<T>),ddd15a681bf42360337844412cae4aba1556eb88,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,Roberto,,x,,No,There is no observable interference; because left did a refactoring; and right created a new instance to JmxReporter class; using differents statements.,[71],[65; 67; 68; 69],Left did a refactoring; an extract method; created a method that returns the 'metricRegistry' attribute.,Created an instance of the JmxReporter.Builder class and passed 'metricRegistry' as a parameter.,TRUE,FALSE POSITIVE,TRUE NEGATIVE,TRUE NEGATIVE,FALSE POSITIVE,TRUE NEGATIVE
33,jenkins,jenkins.slaves.DefaultJnlpSlaveReceiver,handle(String; JnlpSlaveHandshake),48b2b951dfb3438999ceda330093cac82b857ce6,TRUE,TRUE,FALSE,FALSE,FALSE,TRUE,Roberto,,x,,Yes,There is observable interference; a test would be to check if ch! = null and !c.equals (ch.getProperty (COOKIE_NAME)); in left will return true and right; will return false.,[52],[52; 56; 57],Left changed the return of a condition from false to true.,Right added an IF; checking if !MatchesSecret (nodeName; handshake) is true; changing the error message of the handshake attribute and error method; then returning true.,TRUE,TRUE POSITIVE,TRUE POSITIVE,TRUE POSITIVE,FALSE NEGATIVE,TRUE POSITIVE
34,logback,ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicyBase,start(),542843fd04a793fb9e0eea0c84d199e66d7c15af,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,Roberto,,x,,Yes,There is observable interference; both changes were in differents state elements; but right created a condition where it can create two objects in different ways. A test would be to pass the dtc.getTimeZone () parameter as not null and then compare the rc object created in left and right; which would be different.,[45],[52; 53; 54; 55; 56],Extracted a variable from constructor DateTokenConverter creating a Object object (Refactor) called dtc.,Created a condition with the dtc object; checking if getTimeZone is different from null and returning an instance of the RollingCalendar object.,TRUE,TRUE POSITIVE,TRUE POSITIVE,FALSE NEGATIVE,TRUE POSITIVE,TRUE POSITIVE
35,orientdb,com.orientechnologies.orient.core.Orient,startup(),a5ce3bcc0a1d196745c575ad6602019f7a6b86f8,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,,x,,No,There is no locally observable interference as the Right just changes the location of a field instatiation.,[191],[158],Left removes an IF statement and a method call on profiler field; and changes the location of an assignment for field active.,Right change the location of the profiler field instatiation.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
36,SimianArmy,com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext,getInstanceJanitor(),345ad9513aafff397050d613fa87ad06ddffe99d,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,Roberto,x,x,,No,There is no locally observable interference as Left just updates the rule already added in base commit; while Right adds a new one.,[227; 228; 229; 230],[232; 233; 234; 235; 237; 238],Left updates the rule added in ruleEngine by method addRule().,Right adds a new if statement; which may also add a new rule in ruleEngine.,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,TRUE NEGATIVE
37,SimianArmy,com.netflix.simianarmy.basic.BasicSimianArmyContext,BasicSimianArmyContext(String),c39c19bc6b9231601f6bc7358e638a99adf37e0d,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,,x,,No,There is no locally observable interference as the Right changes still write on LOGGER; without any impact on Right changes.,[128; 129; 130; 131; 115; 132; 133; 134; 135; 141; 126; 127],[112; 113; 114; 115; 110; 111],Left adds five new five fields on the class and their instantiations.,Right changes the contents that are written on the field LOGGER.,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
38,alluxio,tachyon.hadoop.HdfsFileInputStream,HdfsFileInputStream(TachyonFS; int; Path; Configuration; int),dafe76c90024a915224264b4862b33f40cb8478c,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,,x,,No,There is no locally observable interference; because was used different state elements. Right add any parameter in LOG attribute and left a refactoring: renaming variables.,[44; 45],[52; 53; 56; 58],Changed the parameters of the debug method of the LOG attribute.,Renamed the variable mTachyonFile and changed it from local variable to class attribute.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
39,voldemort,voldemort.VoldemortClientShell,VoldemortClientShell(ClientConfig; String; BufferedReader; PrintStream; PrintStream),b30fdfebe30c9b6e37b9fbc3fec0ff74cd19f997,TRUE,TRUE,FALSE,TRUE,FALSE,FALSE,Roberto,,x,,Yes,Although left changes the object used by right changes; they don't interfere with each other; because the fields changed by left are not used by the methods called by right,[123],[128; 127],Left changed the parameters for the constructor of the adminClient object; inserting the reference passed by parameter instead of a new object.,Right created a local variable called 'cluster' that access the 'adminClient' attribute and assigned a 'RoutingStrategyFactory' object to routingStrategy; passing the created variable.,TRUE,TRUE POSITIVE,TRUE POSITIVE,TRUE POSITIVE,TRUE POSITIVE,FALSE NEGATIVE
40,voldemort,voldemort.server.VoldemortConfig,VoldemortConfig(Props),4cc1c145819030c8e2baffe4c92383de14b8d880,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,Roberto,,x,,No,Comparar o readOnlyLoginIntervalMs da instÃ¢ncia VoldemortConfig de left com os de right.,[359],[448; 455],Inserted a change to the readOnlyLoginIntervalMs attribute using the the object 'props' passed by parameter and the method getLong.,Inserted changes to the attributes nioConnectorKeepAlive and nioAdminConnectorKeepAlive; using the props object passed by parameter and the getBoolean methods and two different strings.,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,TRUE NEGATIVE
41,libgdx,com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application,newWindow(ApplicationListener; Lwjgl3WindowConfiguration),da27e2dae56be0a159e82231e5c3a5b83b099063,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,Changes are made to different attributes of an object that do not interfere with each other. The changes generate different visual effects in the GUI; which can cause a globally observed difference. However; we are only interested in local interference.,[318],[325],Left changes four attributes of an object using a set method,Right uses a set method to change the value of an object's attribute,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
42,libgdx,com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration,copy(Lwjgl3ApplicationConfiguration),da27e2dae56be0a159e82231e5c3a5b83b099063,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,The changes of the different branches are in different attributes of the object that do not interfere with each other,[96; 97; 98; 99],[107],Left assigns new values ââfrom the method parameter to four different attributes of the object.,Right assigns a new value from the method parameter to an attribute of the object.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
43,RxJava,rx.internal.operators.OperatorMulticast,connect(Action1<?superSubscription>),a40a4130edcdadc2340da5787ca30353018173f2,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE,Roberto,,x,,No,There is no locally observable interference as the contributions change different objects; and these changes are not accessed by each other.,[94],[128; 129; 131; 117; 118; 119; 120; 121; 122; 124; 125],Left modifies subscription.,Right modifies subject.,TRUE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE
44,RxJava,rx.concurrency.TestScheduler,triggerActions(long),1c47b0cb26e6d971eefa42ebb3479099236b0125,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,While Left changes the final value assigned to field time; Right restricts an external method call; which doesn't involve the field time. So there is no locally observable interference.,[100],[96; 97; 95],Left moves the value assignment of the field time from the first IF declaration to the end of the method declaration.,Right adds a new IF declaration. Now; an external method call is done only if current TimedAction object is not canceled.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
45,elasticsearch-river-mongodb,org.elasticsearch.river.mongodb.MongoDBRiverDefinition,parseSettings(String; String; RiverSettings; ScriptService),3d4f99516ba3177f7d88a1f600923138a8b77cc8,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,x,,,No,There is no locally observable interference as the Left changes just sets two fields on a local variable; while the Right still write the same content on logger.,[714; 699; 683; 717; 686; 703],[576; 515; 582; 617; 490; 635; 670],Left sets two fields on local variable builder.,Right replaces the method calls of logger.debug to logger.trace; and logger.warn to logger.error.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
46,elasticsearch-river-mongodb,org.elasticsearch.river.mongodb.Slurper,assignCollections(),3d4f99516ba3177f7d88a1f600923138a8b77cc8,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,Roberto,x,x,,Yes,It can be a test conflict; as one parent sets the attribute's value (oplogRefsCollection) using another attribute; which was modified by the other parent (oplogDb). The test case should have as Entry:  !definition.getMongoLocalAuthDatabase().isEmpty() == FALSE; !definition.getMongoAdminUser().isEmpty() == TRUE; !definition.getMongoLocalUser().isEmpty() == FALSE. The assertions should explore the values of oplogDb and oplogRefsCollection. In the Base commit; we would have: oplogDb = mongo.getDB(MongoDBRiver.MONGODB_LOCAL_DATABASE); and no change for oplogRefsCollection. For Left commit; we would have: oplogDb = mongo.getDB(definition.getMongoLocalAuthDatabase()); and no change for oplogRefsCollection. Finally; for Merge commit; we would have: oplogDb = mongo.getDB(definition.getMongoLocalAuthDatabase()); and oplogDb = oplogDb.getMongo().getDB(MongoDBRiver.MONGODB_LOCAL_DATABASE). Test does not present stable results.,[288; 289; 290; 322; 291; 292; 293; 294; 295; 297; 298; 286; 287],[315; 331; 302],Left adds some if statements and changed the values of two variables: adminDb and oplogDb.,Right changes the value of oplogRefsCollection by calling a method of oplogDb ,TRUE,TRUE POSITIVE,TRUE POSITIVE,FALSE NEGATIVE,TRUE POSITIVE,FALSE NEGATIVE
47,elasticsearch-river-mongodb,org.elasticsearch.river.mongodb.MongoDBRiverDefinition,parseSettings(String; String; RiverSettings; ScriptService),6b6ce8e851c6613213c4508c3f277a80649e0c7b,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,,x,,No,There is no locally observable interference as the Left changes just sets some fields on a local variable; while the Right still write the same content on logger.,[534; 646; 535; 536; 538; 539; 540; 541; 526],[561; 500; 567; 602; 475; 620; 655],Left changes the parameter used to assgin a value to field socketTimeout on local variable builder; sets the field isMongos on builder; and adds a new parameter used to instantiate the local variable scriptExecutable.,Right replaces the method calls of logger.info to logger.trace; and logger.warn to logger.error.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
48,elasticsearch-river-mongodb,org.elasticsearch.river.mongodb.Indexer,applyAdvancedTransformation(QueueEntry; String),6b6ce8e851c6613213c4508c3f277a80649e0c7b,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,Roberto,x,,,No,There is no locally observable interference as the Right changes still write the same contents on logger; and this does not interfere with Left changes.,[321],[288; 358; 331; 287],Left adds a new parameter used to instantiate the local variable scriptExecutable.,Right changes a IF verification and replaces method calls of logger.debug for logger.trace,TRUE,FALSE POSITIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,FALSE POSITIVE
49,elasticsearch-river-mongodb,org.elasticsearch.river.mongodb.Indexer,processBlockingQueue(QueueEntry),6b6ce8e851c6613213c4508c3f277a80649e0c7b,TRUE,FALSE,FALSE,TRUE,TRUE,TRUE,Roberto,x,,,No,There is no locally observable interference as the changes do not interfere with each other.,[176],[161; 198; 201; 189],Left adds a new parameter on constructor to instatiate the local variable executableScript.,Right replaces some method calls of logger.debug to logger.trace; and also removes an old call to write on logger (logger.debug). It assigns a hashmap object to local variable ctx.,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,FALSE POSITIVE
50,elasticsearch-river-mongodb,org.elasticsearch.river.mongodb.Slurper,run(),6b6ce8e851c6613213c4508c3f277a80649e0c7b,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,x,,,No,There is no locally observable interference as the Right changes still write the same contents on logger; and this does not interfere with Left changes.,[105],[145; 148],Left adds a new IF statement; which could restrict the assginment value for the local variable startTimestamp.,Right replaces the method calls of logger.warn for logger.error,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
51,elasticsearch-river-mongodb,org.elasticsearch.river.mongodb.Slurper,addToStream(Operation; Timestamp<?>; DBObject; String),6b6ce8e851c6613213c4508c3f277a80649e0c7b,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,x,,,Yes,There is a locally observable interference as both contributions add new contents to logger. A test case should explore the final contents on logger.,[752; 747; 748; 751],[736; 737; 738; 739; 740; 741; 742; 743],Left adds new calls for writing on logger (logger.info).,Right adds a new call for writing on logger.,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
52,hector,me.prettyprint.cassandra.connection.client.HSaslThriftClient,open(),0588608e7a2bdf974c985ff546207104f672bf6c,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE,Roberto,x,x,,Yes,There is locally observable interference; because both changed the same attribute; where left changed the constructor of the parameter 'transport'; a test could be compare the log from the constructor of the KerberosUserConfiguration () class; which is instantiated by the openKerberosTransport method which is called pro left on line 111;,[96; 97; 94; 111; 95],[122],Left changed the local variable 'socket'; inserting a try catch and changed the transport attribute.,Right changed the 'transport' variable and used it as a parameter for a method.,TRUE,TRUE POSITIVE,FALSE NEGATIVE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE
53,hector,me.prettyprint.cassandra.connection.client.HKerberosThriftClient,open(),a33a46506656a39d1b0f7780973905665d3b6145,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,Roberto,x,x,,Yes,There is locally observable interference; right changed a parameter to check if 'param' was null; adding a try catch; a test would be to call the open() method; passing param as null; on left and base will throw an exception.,[88],[69; 70; 71; 72; 73; 74; 75; 76],Left changed the transport statement using the socket variable (changed by right).,Right added a try catch to check if 'param' was null; changing the socket statement.,TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE,TRUE POSITIVE
54,hector,me.prettyprint.cassandra.connection.client.HThriftClient,open(),a33a46506656a39d1b0f7780973905665d3b6145,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,Roberto,x,x,,Yes,There is locally observable interference; right changed a parameter to check if 'param' was null; adding a try catch; a test would be to call the open() method; passing param as null; on left and base will throw an exception.,[164],[147; 148; 149; 150; 151; 152; 169; 153; 154],Left changed the transport statement using the socket variable (changed by right).,Right added a try catch to check if 'param' was null; changing the socket statement. And added a condition to check that the 'transport' attribute was not open (! Transport.isOpen ()).,TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE,TRUE POSITIVE
55,hector,me.prettyprint.cassandra.connection.HConnectionManager,operateWithFailover(Operation<?>),213f7887ea70eabdf0705cf8454de29af89e8c38,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,x,,,No,There is no locally observable interference; because did structural changes.,[267; 268],[200],Left changed the log level from log.error() to log.warn().,Right changed the creation of a local variable called 'stopWatch'; changed the creation of a new instance with 'new'; calling a method that returns an existing instance (stopWatchFactory.getStopWatch()).,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
56,titan,com.thinkaurelius.titan.graphdb.database.serialize.SerializerInitialization,initialize(Serializer),387c16ea05ef9fa312f37139228d2bbf61455ff4,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,x,x,,No,There is no locally observable interference as the individual contributions change different objects (both change the field size of different arrays).,[52; 53; 54; 55; 57],[31],Left adds and removes calls for method registerClass of serialize object; that registers new classes in the registrations hashmap.,Right changes one call for method registerClass by adding a new parameter (instead of only two); and this new parameter will be added into headers hashmap.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
57,titan,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx,StandardTitanTx(StandardTitanGraph; TransactionConfiguration; BackendTransaction),04edd7f0e7eab2e8255a497922e34dc707d84c19,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,,x,,No,There is no locally observable interference; because right did structural changes and left created new attributes.,[182; 183],[197; 198; 199],Left created three private final type attributes and assigned two of them with a constructor within the method.,Right added a conditional and used other statements: config.getMetricsPrefix() and MetricManager.INSTANCE.getCounter(config.getMetricsPrefix()),FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
58,MPAndroidChart,com.xxmassdeveloper.mpchartexample.fragments.SimpleFragment,generateScatterData(int; float; int),af114d180da6ec5633d32c701ff5467f7629fcf3,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,,,x,No,There is no locally observable interference as the individual contributions change different objects.,[80; 91],[73],"Changes the values passed to the Entry class constructor; inverting the passed parameters; that changes inteferes with a call to setScatterShape modifying an attribute on the ScatterDataSet class . Removes the value ""ChartData.generateXVals(0; count)"" from the ScatterObject creation","Changes the method that initializes the shapes array to ""ScatterChart.ScatterShape.getAllDefaultShapes()"" that adds new shapes to the shapes variable",FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
59,MPAndroidChart,com.xxmassdeveloper.mpchartexample.ScatterChartActivity,onProgressChanged(SeekBar; int; boolean),af114d180da6ec5633d32c701ff5467f7629fcf3,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,,,,No,There is no locally observable interference as the contributions change different objects; and these changes are not accessed by each other. Probably due to the invalidate() method causing globally observable interference; these changes were made. However; since our focus is on LOI (Local Observability Interference); we have not marked any conflicts.,[178; 168; 188; 204; 173; 205],[183; 186; 191],Left made changes to yVals1; yVals2; and yVals3; then also altered the same object set2 from right but in different attributes. Finally; left modifies the data object; which contains a list with set1; set2; and set3.,Right made changes to set1; set2; and set3; which were created using yVals but are elements of different states. Both sides preserved each other's changes.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
60,MPAndroidChart,com.xxmassdeveloper.mpchartexample.ScatterChartActivity,onCreate(Bundle),af114d180da6ec5633d32c701ff5467f7629fcf3,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,,,x,No,There is no locally observable interference as the contributions change different objects; and these changes are not accessed by each other. Both developers also write to the same object but in different attributes.,[80; 86; 77; 63],[57],Left refactored by renaming tf to mtfLight and moved the variable initialization to the onCreate method of the superclass. And writes to maxHighlightDistance; and right writes to shapeRendererList.,Right writes to shapeRendererList.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
61,MPAndroidChart,com.xxmassdeveloper.mpchartexample.LineChartActivity2,onCreate(Bundle),9297923f09460d0484cd713b0abbeaea9b888ec0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,,,x,No,"Coudn't have a Locally Observable Interference;
because different state elements are changed and then 
the execution stops; but as it is an android application 
after the onCreate method call the screen will be rendered 
and could happen a Observable Interference",[126],[117],Added a call to the setDrawZeroLine method setting the value for the field mDrawZeroLine at the rightAxis object as false.,Deprecated the method setStartAtZero from the YAxis class; and removed the call for it on the  rightAxis object. Added a call to the method setAxisMinValue on the left axis object ,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
62,MPAndroidChart,com.xxmassdeveloper.mpchartexample.RadarChartActivitry,onCreate(Bundle),9297923f09460d0484cd713b0abbeaea9b888ec0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,,,x,No,There is no locally observable interference as the contributions change different objects; and these changes are not accessed by each other.,[59; 60; 61; 62],[72],Left; in the animateXY method; writes to the mAnimator attribute;,Right writes to XAxis.xCustomAxisMin. Below this; there are only getters and setters.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
63,MPAndroidChart,com.xxmassdeveloper.mpchartexample.StackedBarActivityNegative,onCreate(Bundle),9297923f09460d0484cd713b0abbeaea9b888ec0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,,,x,No,There is no locally observable interference as the contributions change different objects; and these changes are not accessed by each other.,[64; 65],[],On the left side; it altered mChart.getAxisRight().setDrawGridLines(false); and mChart.getAxisRight().setDrawZeroLine(true);. ,Right side removed setStartAtZero() from the getAxisRight object. This was probably due to the invalidate() method causing globally observable interference. However; as our focus is on LOI (Local Observability Interference); we should pay attention to these modifications.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
64,MPAndroidChart,com.xxmassdeveloper.mpchartexample.LineChartActivity1,onCreate(Bundle),9297923f09460d0484cd713b0abbeaea9b888ec0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,,,x,No,There is no locally observable interference as the contributions change different objects; and these changes are not accessed by each other.,[135],[],On the left side; it altered mChart.getAxisRight().setDrawZeroLine(true);.,On the right side; it removed setStartAtZero() from the getAxisRight object; but it was in a different class from the previous one. This was probably done to avoid globally observable interference caused by invalidate(). However; since our focus is on LOI (Local Observability Interference); we should closely examine these modifications.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
65,MPAndroidChart,com.github.mikephil.charting.renderer.LineChartRenderer,drawData(Canvas),9531ba69895cd64fce48038ffd8df2543eeea1d2,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,,,x,Yes,There are locally observable interference and a textual conflict. The integrator accepted both changes and also added the cast to the first condition. There is a conflict because the change made by the left side was not preserved; and the cast added in the right side's change may have altered the behavior of the code. This situation requires careful resolution to ensure the correct behavior of the application.,[],[],On the left side; two conditions were added: (mPathBitmap.getWidth() != mViewPortHandler.getChartWidth()) || (mPathBitmap.getHeight() != mViewPortHandler.getChartHeight()). ,On the right side; the last condition was added; and it involved casting to an integer: (int) mViewPortHandler.getChartHeight(). ,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
66,MPAndroidChart,com.github.mikephil.charting.renderer.PieChartRenderer,drawData(Canvas),9531ba69895cd64fce48038ffd8df2543eeea1d2,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,,,x,Yes,There are locally observable interference and a textual conflict. The integrator accepted both changes and also added the cast to the first condition. There is a conflict because the change made by the left side was not preserved; and the cast added in the right side's change may have altered the behavior of the code. This situation requires careful resolution to ensure the correct behavior of the application.,[],[94],On the left side; two conditions were added: (mPathBitmap.getWidth() != mViewPortHandler.getChartWidth()) || (mPathBitmap.getHeight() != mViewPortHandler.getChartHeight()). ,On the right side; the last condition was added; and it involved casting to an integer: (int) mViewPortHandler.getChartHeight(). ,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
67,elasticsearch,org.elasticsearch.common.settings.IndexScopedSettings,BUILT_IN_INDEX_SETTINGS,d896886973660785aac45275ddb110c1a6babc57,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,x,,,-,"Both changed the same attribute initialization; in this case; both changing the Set size
Test that fails in base; passes in left and fails in merge:

settings = IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
assert(settings.size(); 82);",[119; 120],[121],Added two elements to a set is a static attribute named BUILT_IN_INDEX_SETTINGS initialization,Added one element to a set is a static attribute named BUILT_IN_INDEX_SETTINGS initialization,FALSE,TRUE NEGATIVE,,,,
68,elasticsearch,org.elasticsearch.action.index.TransportIndexAction,executeIndexRequestOnPrimary(IndexRequest; IndexShard; MappingUpdatedAction),d896886973660785aac45275ddb110c1a6babc57,FALSE,FALSE,TRUE,FALSE,FALSE,FALSE,Mining,x,,,No,Right changes were a extract variable refactoring,[196],[201],"Added a call to a set method ""seqNo""; and passed the value as a parameter to the IndexResponse constructor",Extract variable on the object created by the IndexResponse constructor,TRUE,FALSE POSITIVE,TRUE NEGATIVE,TRUE NEGATIVE,FALSE POSITIVE,TRUE NEGATIVE
69,elasticsearch,org.elasticsearch.action.support.replication.ReplicationOperationTests,testReplication(),d896886973660785aac45275ddb110c1a6babc57,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,x,,,No,There is no locally observable interference; because was used different state elements. Right has a listener of type TestPrimary.Result and left of type Response.,[106; 108; 125; 126],[116; 103],Extracted a variable from constructor TestReplicationOperation creating a TestPrimary object (Refactor) and added two assertThat method calls on the end of the method,Changed the generic used at the PlainActionFuture type on the listener variable and Changed the type of shardInfo to import directly the inner ShartInfo; instead as accessing it from its outer class ,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
70,elasticsearch,org.elasticsearch.index.IndexSettings,IndexSettings(IndexMetaData; Settings; Predicate<String>; IndexScopedSettings),d896886973660785aac45275ddb110c1a6babc57,TRUE,FALSE,TRUE,TRUE,FALSE,FALSE,Mining,x,,,No,Both a change different state elements; left changes only the globalCheckpointInterval field; and right changes the maxRefreshListeners and a field on the scopedSettings different than the one used in left ,[238],[246; 269],Added the initialization to the globalCheckPointInterval field getting from scopedSettings map ,Added the initialization to the maxRefreshListeners field getting from scopedSettings map and added a call to addSettingsUpdateConsumer for the key that got the  maxRefreshListeners,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,TRUE NEGATIVE
71,elasticsearch,org.elasticsearch.action.bulk.TransportShardBulkAction,update(IndexMetaData; BulkShardRequest; IndexShard; long[]; VersionType[]; Translog.Location; int; BulkItemRequest),d896886973660785aac45275ddb110c1a6babc57,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,Mining,x,,,No,There is no locally observable interference; because right renames one called method and changes one attribute to access via getter instead of direcly reading it ,[268; 255],[244; 249; 266; 254],Added the parameter seqNo to both calls of the UpdateResopnse constructor ,Added a SupressWarning annotation twice and refactored the WriteResult class to return its parameters via getResponse and getLocation (Refactor),TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,FALSE POSITIVE
72,elasticsearch,org.elasticsearch.action.support.replication.TransportReplicationAction,doRun(),d896886973660785aac45275ddb110c1a6babc57,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,x,,,Yes,Considering the changes performed by the integrator; it adds a parameter on the method call result.response. There is no interference; DF; CF; OA based on the parent contributions. In the base commit; there is write on the log object; in the right commit; no write is performed; in the merge commit; an exception can be thrown on class IndexShard.acquireReplicaOperationLock because of the changes from integrator.,[455; 458; 460],[457; 459],Left creates a new local variable; and assigns a value to it depending on a try; which was also changed by Left.,Right adds a new local variable and assings a value to it inside a try; which was chaged by Left.,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
73,elasticsearch,org.elasticsearch.action.support.replication.ReplicationOperation,execute(),d896886973660785aac45275ddb110c1a6babc57,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,Mining,x,,,No,There is no locally observable interference as the new method calls added by Right just reads the value of replicaRequest (PrimaryRequest class); while the Left changes adds a message on the logger (GlobalCheckPointService class).,[98; 109],[113; 98; 99; 101; 119; 108; 110],Left creates a new local variable primaryRounting; while it also adds a new call for updateLocalCheckpointForShard on the field primary.,Right creates a new local variable primaryRounting and renames the local variable primaryId. It also adds a new call for replicaRequest on the field primaryResult.,TRUE,FALSE POSITIVE,FALSE POSITIVE,FALSE POSITIVE,FALSE POSITIVE,FALSE POSITIVE
74,elasticsearch,org.elasticsearch.index.engine.InternalEngineTests,testRecoverFromForeignTranslog(),d896886973660785aac45275ddb110c1a6babc57,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,x,,,No,There is no locally observable interference as the parent changes only updates method calls for creating different objects.,[2091],[2124],Left updates the method call for creating a new Index object. Now; it is also assigned a value for field seqNo.,Right updates the method call for creating a new EngineConfig object. Now; it is also assigned a value for field refreshListeners.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
75,elasticsearch,org.elasticsearch.index.engine.InternalEngine,InternalEngine(EngineConfig),d896886973660785aac45275ddb110c1a6babc57,TRUE,FALSE,TRUE,FALSE,FALSE,FALSE,Mining,x,,,No,There ir no locally observable interference as the parent changes only reads different fields of the object engineConfig.,[134],[161; 162; 163; 164],Left adds a new field in the class; and also assigns a value for it in the constructor.,Right adds a new IF statement; which whether a property on the object engineConfig is nulll.,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,TRUE NEGATIVE
76,elasticsearch,org.elasticsearch.action.DocWriteResponse,writeTo(StreamOutput),d896886973660785aac45275ddb110c1a6babc57,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,x,,,Yes,When a new byte is added on a matrix of bytes (BigByteArray class); the field count is incremented by 1 (BytesStreamOutput class). As both parent contributions add a new call for adding a new byte; both changes the vaue of count. A test case could call method writeTo sending as parameter an object of type BytesStreamOutput. After the method execution; an assertion should check the value assigned to the field count. Consider that in base commit; count would have value X; in left commit value X+1; and in merge commit value X+2. (assertEquals(x+1; out.position()),[140],[141],Left adds a call for method writeZLong on the out object sending a long value.,Right adds a call for method writeBoolean on the object out sending a boolean value.,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
77,elasticsearch,org.elasticsearch.action.DocWriteResponse,readFrom(StreamInput),d896886973660785aac45275ddb110c1a6babc57,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,Left and Right changes just added new method calls that returns the byte at the buffer's current position.,[129],[130],Left adds a call for method readZLong on the in object.,Right adds a call for method readBoolean on the object in.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
78,elasticsearch,org.elasticsearch.action.DocWriteResponse,toXContent(XContentBuilder; Params),d896886973660785aac45275ddb110c1a6babc57,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,DeSouza,x,,x,Yes,Left and Right add different objects in the generator field on class JsonXContentGenerator. In the class WriterBasedJsonGenerator; there is an implementation of method writeFieldName; that increment the value of _outputTail. A test case should explore this field; after writing a new String by calling method field. assertEquals(X; xcontentBuilder._outputTail).,[163; 164; 165; 166],[160],Left adds two calls for method field on the object builder.,Right adds a call for method field on the object builder.,TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE,FALSE NEGATIVE
79,elasticsearch,org.elasticsearch.cluster.metadata.MetaDataCreateIndexService,createIndex(CreateIndexClusterStateUpdateRequest; ActionListener<ClusterStateUpdateResponse>),d896886973660785aac45275ddb110c1a6babc57,TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,Mining,x,,,Yes,Right altered the variable indexMetaDataBuilder at line 345. Left altered the variable indexService. Base uses an indexMetaData = indexMetaDataBuilder.build(); at line 369 and at line 375; it uses indexService.getIndexEventListener().beforeIndexAddedToCluster(indexMetaData.getIndex(); indexMetaData.getSettings());,[315],[304; 305; 309; 310; 312; 346; 300],Left adds two new parameters when creating the local variable indexService.,Right extracts a local variable (refactoring) and also adds a new local variable routingNumShards.,TRUE,TRUE POSITIVE,TRUE POSITIVE,FALSE NEGATIVE,TRUE POSITIVE,FALSE NEGATIVE
80,elasticsearch,org.elasticsearch.action.update.TransportUpdateAction,shardOperation(UpdateRequest; ActionListener<UpdateResponse>; int),d896886973660785aac45275ddb110c1a6babc57,TRUE,FALSE,TRUE,TRUE,FALSE,TRUE,Mining,x,,,No,There is no locally observable interference as even the changes overriding the same object; they do not interfere with each other.,[224; 185; 254],[192; 249; 250],Left adds new parameters when creating the local variable update.,Right sets the field forcedRefresh of the local variable update,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,FALSE POSITIVE
81,elasticsearch,org.elasticsearch.action.delete.TransportDeleteAction,executeDeleteRequestOnPrimary(DeleteRequest; IndexShard),d896886973660785aac45275ddb110c1a6babc57,TRUE,FALSE,TRUE,FALSE,FALSE,FALSE,Mining,x,,,No,There is no local interference as Right performs a refactoring; while Left only sets an atribute on the object request (parameter).,[136],[140],Left sets the field seqNo on object request; and added this value on the call to create the returned object DeleteResponse.,Right does a refactoring by extracting a variable; and them call the method to create the method return object.,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,TRUE NEGATIVE
82,elasticsearch,org.elasticsearch.rest.action.cat.RestNodesAction,getTableWithHeader(RestRequest),3764b3ff800c94293aba0bb0fa18c7df80a764f7,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,"Because right only modifies an existing element of the List and lefts removes 
some elements of the array that are after rights changes; they don't interfere
with the same state elements",[],[153; 154; 156; 157; 158; 159],Removed calls to a method that modifies the table object,Changed parameters passed to a method that modifies the table object,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
83,elasticsearch,org.elasticsearch.rest.action.cat.RestIndicesAction,getTableWithHeader(RestRequest),3764b3ff800c94293aba0bb0fa18c7df80a764f7,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,"Because right only modifies an existing element of the List and lefts removes 
some elements of the array that are after rights changes; they don't interfere
with the same state elements (same as previous)",[],[144; 147; 150; 153; 138; 141],Removed calls to a method that modifies the table object,Changed parameters passed to a method that modifies the table object,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
84,elasticsearch,org.elasticsearch.rest.action.cat.RestShardsAction,getTableWithHeader(RestRequest),3764b3ff800c94293aba0bb0fa18c7df80a764f7,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,"Because right only modifies an existing element of the List and lefts removes 
some elements of the array that are after rights changes; they don't interfere
with the same state elements (same as previous)",[],[112; 113],Removed calls to a method that modifies the table object,Changed parameters passed to a method that modifies the table object,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
85,elasticsearch,org.elasticsearch.common.settings.ClusterSettings,BUILT_IN_CLUSTER_SETTINGS,0404db65e3497452886173957729c8e82cfd4a03,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,,,,-,,[259; 264; 265],[256; 257; 258; 259; 254; 255],,,FALSE,TRUE NEGATIVE,,,,
86,elasticsearch,org.elasticsearch.test.ESSingleNodeTestCase,newNode(),0404db65e3497452886173957729c8e82cfd4a03,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,DeSouza,,,x,No,Both changes by left and right are refactorings,[171],[173; 174],"Changed the key parameter passed 
to put; to a constant with the same value (Extract variable)","Changed the key parameter passed 
to two other puts; to a constant with the same value (Extract variable)",TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,FALSE POSITIVE
87,elasticsearch,org.elasticsearch.index.query.support.NestedInnerQueryParseSupport,setPathLevel(),59cb67c7bd0ab6311115b20954e013412b676b29,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,DeSouza,x,,x,No,There is no locally observable interference as the Left contributions are refactorings; and only Right changes the program behavior.,[193; 195; 197; 200],[199],Left adds a new field; and use it to assign values for fields parentFilter and parentObjectMapper; it has the same behavior when compared to base commit.,Right changes the value assigned to childFilter,TRUE,FALSE POSITIVE,TRUE NEGATIVE,TRUE NEGATIVE,FALSE POSITIVE,TRUE NEGATIVE
88,elasticsearch,org.elasticsearch.index.query.MultiMatchQueryBuilder,doXContent(XContentBuilder; Params),59cb67c7bd0ab6311115b20954e013412b676b29,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,x,,,Yes,There is locally observable interference. Creating an XContentBuilder builder object; passing the queryName and boost attributes as null; throws an exception on left and passes it on right.,[306; 367],[],"Changed the parameter sent to the startObject method but the value of the parameter remained the same;

Removed two if conditions that made calls to the field method by passing (""boost""; boost) and (""_name""; queryName).

Added a call to the printBoostAndQueryName method passing the builder object as a parameter.",Removed an if condition (rewrite! = Null) that used the field method of the builder object,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
89,elasticsearch,org.elasticsearch.index.analysis.synonyms.SynonymsAnalysisTest,testSynonymsAnalysis(),f3d63095dbcc985e24162fbac4ee0d6914dc757d,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,DeSouza,x,,x,No,There is no locally observable interference as Right just does a refactoring.,[65; 66; 67; 68; 69; 70; 71; 76],[73; 75],Left extracts a local variable home of the parameter used on method put. Now; it's used the return of createTempDir instead of createTempDir().toString();,Right extracts a local variable json from the parameter sent to method loadFromStream. It also replaced the method call loadFromClasspath to loadFromStream; which is done by the method return object of settingsBuilder.,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,FALSE POSITIVE
90,elasticsearch,org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests,testQueryModeCommonGramsAnalysis(),f3d63095dbcc985e24162fbac4ee0d6914dc757d,TRUE,TRUE,TRUE,TRUE,TRUE,FALSE,Mining,x,,,No,There is no locally observable interference. Right did a refactoring: extract variable.,[229],[226; 228],Replaced the call to the createTempDir().toString() method with createHome(),"Added a variable called Json containing a String with the path to the file commongrams_query_mode.json;
Replaced the loadFromClasspath method with loadFromStream;",TRUE,FALSE POSITIVE,FALSE POSITIVE,FALSE POSITIVE,FALSE POSITIVE,FALSE POSITIVE
91,elasticsearch,org.elasticsearch.index.analysis.commongrams.CommonGramsTokenFilterFactoryTests,testCommonGramsAnalysis(),f3d63095dbcc985e24162fbac4ee0d6914dc757d,TRUE,TRUE,TRUE,TRUE,TRUE,FALSE,Mining,x,,,No,There is no locally observable interference. Right did a refactoring: extract variable.,[144],[141; 143],"Left changed the local settings variable with a call to put() method in settingsBuilder(); which uses the local variable called ""json"" changed by right.",Right changed the local variable json. Changed the local varibale called settings with a call to loadFromStream() method in settingsBuilder(),TRUE,FALSE POSITIVE,FALSE POSITIVE,FALSE POSITIVE,FALSE POSITIVE,FALSE POSITIVE
92,elasticsearch,org.elasticsearch.index.analysis.KuromojiAnalysisTests,createAnalysisService(),f3d63095dbcc985e24162fbac4ee0d6914dc757d,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,Mining,x,,,No,There is no locally observable interference. Right did a refactoring: extract variable.,[196; 197; 198; 199; 200; 201; 202; 206],[204; 207],"Left changed the local settings variable with a call to put() method in settingsBuilder(); which uses the local variable called ""json"" changed by right.
Changed other local variables: empty_dict; dict; home; config and Files; not used by right.",Right changed the local variable json. Changed the local varibale called settings with a call to loadFromStream() method in settingsBuilder(),TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,FALSE POSITIVE
93,elasticsearch,org.elasticsearch.index.query.SimpleIndexQueryParserTests,setup(),36884807b3cc9d660db4da062275c7fdbec8ba67,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,DeSouza,x,,x,No,There is no locally observable interference as the contributions change differnt obejcts; which do not interfere with each other.,[217],[208],Left set the fields type and id on the local variable doc. Refactoring,Right adds a new entry on the local obecjt settings.,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,FALSE POSITIVE
94,fitnesse,fitnesse.testsystems.slim.tables.SlimTableFactoryTest,setUp(),4d9ba9d221d879507440feb084fa7521b95111ec,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Roberto,x,,,Yes,The interference occurs because both parents change the field size of map. A test case assert should explore the map size.,[32; 31],[38],Left adds two entries on the field map.,Right adds one entry on the field map.,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
95,fitnesse,fitnesse.testsystems.slim.tables.SlimTableFactory,SlimTableFactory(),4d9ba9d221d879507440feb084fa7521b95111ec,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,Roberto,x,x,,Yes,Left and right change values of the same map; which means they change the size field. A test case to detect this conflict can be found here.,[24; 25],[31],Left adds two new elements into a map; by calling the add method addTableTye twice.,Right adds a new element into a map; also calling the method addTableType.,TRUE,TRUE POSITIVE,FALSE NEGATIVE,FALSE NEGATIVE,TRUE POSITIVE,FALSE NEGATIVE
96,cloud-slang,io.cloudslang.lang.api.SlangImpl,getAllEventTypes(),20bac30d9bd76569aa6a4fa1e8261c1a9b5e6f76,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Leuson,x,,,Yes,Left and right add new values of a same list; which means they change the field size. A test case to detect this conflict can be found here.,[116],[123; 124; 125],Left adds new values into a list,Right adds new values into a list,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
97,cloud-slang,io.cloudslang.lang.api.SlangImplTest,ALL_EVENTS_SIZE,20bac30d9bd76569aa6a4fa1e8261c1a9b5e6f76,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Leuson,x,,,-,,[59],[],,,FALSE,TRUE NEGATIVE,,,,
98,spring-boot,org.springframework.boot.jta.atomikos.AtomikosProperties,asProperties(),6664ce19d6f2388ebd6cf54763f54fdddd226b9a,not-found,not-found,not-found,not-found,not-found,not-found,DeSouza,,,,-,Left and Right changes the same field count in class Hashtable. A test case should call the method asProperties; and check the value assigned to this field. For example; assertEquals(x; properties.count). This field count might be got by other methods like properties.stringPropertyNames().size().,[323; 324; 325; 326; 327; 328; 317],[],Left adds calls for method set; which adds values on the object properties.,Right removes calls for method set; which added values on the object properties.,FALSE,TRUE NEGATIVE,,,,
99,spring-boot,org.springframework.boot.jta.atomikos.AtomikosPropertiesTests,testProperties(),6664ce19d6f2388ebd6cf54763f54fdddd226b9a,not-found,not-found,not-found,not-found,not-found,not-found,Mining,x,,,-,Left and Right modify the elements of the object properties. Merge conflicts happen; but the integrator consider all parent contributions. However; this test case would detect a conflict by using one of the parent expected number of properties in the first assertion.,[49; 68; 55; 56; 57; 58; 74; 75; 76; 77],[],Left sets five new properties of the object properties (field); and consequently updates the expected value of first assertion.,Right removes five properties of the object properties (field); and consequently updates the expected value of first assertion.,FALSE,TRUE NEGATIVE,,,,
100,spring-boot,org.springframework.boot.jta.atomikos.AtomikosPropertiesTests,testDefaultProperties(),6664ce19d6f2388ebd6cf54763f54fdddd226b9a,not-found,not-found,not-found,not-found,not-found,not-found,Mining,x,,,-,Left changed the number of attributes of the testing and right created a test with the size of the attributes in class MapEntry.  An exception can occur if left tries to access attributes of right.; because right removed some parameter.,[89; 93; 94; 95; 96; 98],[],Added some attributes for a test; changing the quantity of the parameters and the key.length() attribute.,Removed some attributes for a test; changing the quantity of the parameters and the key.length() attribute.,FALSE,TRUE NEGATIVE,,,,
101,spring-boot,org.springframework.boot.autoconfigure.mongo.MongoProperties,builder(MongoClientOptions),958a0a45f164601d01cb706c19f22ed3e25eff56,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,Modifications were made to different attributes; using set methods; they don't interfere with the same state elements,[272],[261; 262; 263; 264; 265; 266; 267; 268; 271],Left changes one attribute of an object using a set method,Left changes nine attributes of an object using a set method,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
102,spring-boot,org.springframework.boot.loader.archive.ExplodedArchiveTests,getUrl(),af20dc6cc45c032573413c401f9f73aa75371744,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,x,,,No,Right did inline variable refactoring and left change the method equalsTo() to isEqualsTo(). The integrator merged both modifications.,[],[],Equals to the base class,Changed a test assert,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
103,spring-boot,org.springframework.boot.loader.archive.ExplodedArchive,getUrl(),af20dc6cc45c032573413c401f9f73aa75371744,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,There is no locally observable interference based on the parent contributions. Left and Right just changes different fields of the object returned by the method. However; the integrator changed the final version; which could reveral a conflict.,[],[],Left removes one parameter (handler) for the new URL object; that is returned by the method.,Right updates one parameter used to create the URL object that is returned by the method; by calling toURL(),FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
104,spring-boot,org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration,cacheManager(RedisTemplate<Object;Object>),c93ea54ea3e08eaa2a17640d5d2b3e60264c1a9c,not-found,not-found,not-found,not-found,not-found,not-found,DeSouza,,,,-,the right changes are simply structural refactoring.,[55],[60],Changed the value of an attribute of an object instance using a set method,Changed the return of the function of a complete object to the result of executing a method of one of the attributes of the class,FALSE,TRUE NEGATIVE,,,,
105,spring-boot,org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory,createDeploymentManager(ServletContextInitializer),ea8107b6a53fa60b5f23b33e1b6d2e88bb60133c,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,There is no locally observable interference as the changes performed by Right still return an object with same behavior when compared to base.,[357; 358; 359; 360; 345; 361; 362],[364],Left sets one attribute of object deployment; which is used to create the returned method object manager.,Right modifies the way the returned manager object is created; before; it was done by calling the method defaultContainer from Servlets; and now itâs done by calling the method newContainer.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
106,spring-boot,org.springframework.boot.context.web.SpringBootServletInitializer,createRootApplicationContext(ServletContext),3444ebbc05b99a164474c14d6a6784f749514428,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,"Changes were made to different statements with a structural refactoring.. Left modified the creation of the instance of other class (called a method that has the  command ""new"") and right inserted a conditional for an attribute of the current class. They do not interfere with the same state elements.",[99],[121; 123],Modified a class's instance declaration; instead of using new Class(); called a method that does this.,Inserted a conditional (if) for an attribute that has not been changed from the left; checking if an attribute of the class is true or false.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
107,spring-boot,org.springframework.boot.context.web.SpringBootServletInitializer,createRootApplicationContext(ServletContext),074771ec125dd407af0282b92960e9e9e3377e84,TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,DeSouza,,,x,No,the left changes are simply structural refactoring.,[87],[88],extracts the instantiation of the object to another method,Change an object's attribute using a set method,TRUE,FALSE POSITIVE,FALSE POSITIVE,TRUE NEGATIVE,FALSE POSITIVE,FALSE POSITIVE
108,spring-boot,org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer,logAutoConfigurationReport(boolean),fdd3f12ee0f92ac18844c08bf71df39feebb6673,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,Yes,The changes are in methods that determine the levels of the logs; both interfere in the output. A test case can be made by creating an assert to check the output produced by comparing the string produced by the left and right log; will be different.,[114],[110],Change the string sent as a parameter to the logger.debug method,Change the string sent as a parameter to the logger.info method,FALSE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE,FALSE NEGATIVE
109,spring-boot,org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory,customizeConnector(Connector),2d4e68a9777601bfb8309c94d8b74bc21be80ad1,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,DeSouza,x,,x,No,The change in right appears to be a refactoring. Its move has no direct impact on any state element.,[240; 241; 242; 243; 244; 246; 247; 248; 249],[228],Added an if condition that has an asset in its body. One method call to configureSsl and two set method calls to connector,Added a wildcard to the generic of the AbstractProtocol class which is used as a casting,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
110,quickml,quickdt.experiments.OutOfTimeCrossValidatorRunner,getRandomForestBuilder(int; int),bae968d9a85c0501ba8842a6f88e7fc2c6b78693,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Guilherme,x,,,No,There is no locally observable interferences as the changes are not related.,[],[42; 43],Left deletes a method call; which set the field maxDepth.,Right renames a local variable RandomForestBuilder; and replaces the method return for that local variable. This variable has a different type related to the method return type on Base commit; but the interface is still the superclass.,FALSE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE,TRUE NEGATIVE
111,vavr,javaslang.collection.HashSet,of(T),204635d9156b498079c2f34b821dca7ca1711ef6,not-found,not-found,not-found,not-found,not-found,not-found,Guilherme,,,,-,,[],[95],,,FALSE,TRUE NEGATIVE,,,,
112,vavr,javaslang.collection.LinkedHashSet,of(T),204635d9156b498079c2f34b821dca7ca1711ef6,not-found,not-found,not-found,not-found,not-found,not-found,Guilherme,,,,-,,[],[92],,,FALSE,TRUE NEGATIVE,,,,
113,vavr,javaslang.collection.CharSeq,of(char),204635d9156b498079c2f34b821dca7ca1711ef6,not-found,not-found,not-found,not-found,not-found,not-found,Guilherme,,,,-,,[],[100; 101; 102; 103; 104; 105; 106],,,FALSE,TRUE NEGATIVE,,,,
114,vavr,javaslang.collection.Iterator,of(T),204635d9156b498079c2f34b821dca7ca1711ef6,not-found,not-found,not-found,not-found,not-found,not-found,Guilherme,,,,-,,[],[144; 145; 161; 146; 147; 149; 153; 158],,,FALSE,TRUE NEGATIVE,,,,
115,crawler4j,edu.uci.ics.crawler4j.parser.Parser,parse(Page; String),6fdb8f27b53c5d69b552341a459d0e1fa610f68d,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,Mining,,,,-,,[113; 69; 85; 71; 72; 73; 74; 75; 76],[96; 98; 99; 101; 69; 102; 71; 74; 76; 89; 91; 92; 93; 95],,,FALSE,TRUE NEGATIVE,,,,